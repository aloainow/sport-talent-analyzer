import streamlit as st
from streamlit_option_menu import option_menu
import plotly.graph_objects as go
from utils.openai_helper import get_sport_recommendations
from utils.test_processor import process_test_results

# Configura√ß√£o da p√°gina - DEVE SER A PRIMEIRA CHAMADA STREAMLIT
st.set_page_config(
    page_title="Analisador de Talentos Esportivos",
    page_icon="üèÉ‚Äç‚ôÇÔ∏è",
    layout="wide"
)

# Inicializa√ß√£o do estado da sess√£o
def init_session_state():
    if 'test_results' not in st.session_state:
        st.session_state.test_results = {
            'physical': {},
            'technical': {},
            'tactical': {},
            'psychological': {}
        }
    if 'recommendations' not in st.session_state:
        st.session_state.recommendations = None

init_session_state()

# Fun√ß√£o para criar o gr√°fico radar
def create_radar_chart(results):
    categories = ['F√≠sico', 'T√©cnico', 'T√°tico', 'Psicol√≥gico']
    values = [
        results.get('physical', {}).get('average', 0),
        results.get('technical', {}).get('average', 0),
        results.get('tactical', {}).get('average', 0),
        results.get('psychological', {}).get('average', 0)
    ]
    
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=values + [values[0]],
        theta=categories + [categories[0]],
        fill='toself',
        name='Seu Perfil'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10]
            )),
        showlegend=False
    )
    
    return fig

def show_for√ßa_tests():
    st.title("üí™ Testes de For√ßa")
    
    st.info("Complete os testes de for√ßa abaixo. Realize cada teste conforme as instru√ß√µes.")
    
    # Teste 1: Flex√µes
    with st.expander("Flex√µes de Bra√ßo", expanded=True):
        st.write("**Descri√ß√£o:** Realize o m√°ximo de flex√µes em 1 minuto")
        st.write("**Equipamento necess√°rio:** Cron√¥metro")
        st.write("**Como realizar:**")
        st.write("""
        1. Posi√ß√£o inicial: prancha
        2. Des√ßa o corpo mantendo alinhado
        3. Suba at√© estender os bra√ßos
        4. Conte repeti√ß√µes em 1 minuto
        """)
        st.write("**Classifica√ß√£o:**")
        st.write("""
        - Iniciante: 10-15 repeti√ß√µes
        - Intermedi√°rio: 16-25 repeti√ß√µes
        - Avan√ßado: 26+ repeti√ß√µes
        """)
        flexoes = st.number_input("N√∫mero de flex√µes", min_value=0, max_value=100)
    
    # Teste 2: Abdominais
    with st.expander("Abdominais", expanded=True):
        st.write("**Descri√ß√£o:** M√°ximo de abdominais em 1 minuto")
        st.write("**Equipamento necess√°rio:** Cron√¥metro, tapete")
        st.write("**Como realizar:**")
        st.write("""
        1. Deitado, joelhos flexionados
        2. M√£os na nuca
        3. Eleve o tronco at√© tocar joelhos
        4. Conte em 1 minuto
        """)
        st.write("**Classifica√ß√£o:**")
        st.write("""
        - Iniciante: 15-20 repeti√ß√µes
        - Intermedi√°rio: 21-30 repeti√ß√µes
        - Avan√ßado: 31+ repeti√ß√µes
        """)
        abdominais = st.number_input("N√∫mero de abdominais", min_value=0, max_value=100)
    
    if st.button("Salvar Resultados"):
        st.session_state.test_results['for√ßa'] = {
            'flexoes': flexoes,
            'abdominais': abdominais
        }
        st.success("Resultados salvos com sucesso!")

def show_velocidade_tests():
    st.title("‚ö° Testes de Velocidade")
    
    st.info("Complete os testes de velocidade abaixo. Realize cada teste conforme as instru√ß√µes.")
    
    # Teste 1: Corrida 20m
    with st.expander("Corrida de 20m", expanded=True):
        st.write("**Descri√ß√£o:** Tempo para percorrer 20 metros")
        st.write("**Equipamento necess√°rio:** Cron√¥metro, fita m√©trica")
        st.write("**Como realizar:**")
        st.write("""
        1. Marque 20m em linha reta
        2. Posi√ß√£o inicial agachado
        3. Corra o mais r√°pido poss√≠vel
        4. Registre o tempo
        """)
        corrida = st.number_input("Tempo (segundos)", min_value=0.0, max_value=20.0, step=0.1)
    
    # Teste 2: Agilidade
    with st.expander("Teste de Agilidade", expanded=True):
        st.write("**Descri√ß√£o:** Corrida em zigue-zague entre 4 pontos")
        st.write("**Equipamento necess√°rio:** 4 marcadores, cron√¥metro")
        st.write("**Como realizar:**")
        st.write("""
        1. Coloque 4 marcadores em quadrado (5m x 5m)
        2. Corra entre eles em zigue-zague
        3. Complete 2 voltas
        4. Registre o tempo
        """)
        agilidade = st.number_input("Tempo de agilidade (segundos)", min_value=0.0, max_value=30.0, step=0.1)
    
    if st.button("Salvar Resultados"):
        st.session_state.test_results['velocidade'] = {
            'corrida_20m': corrida,
            'agilidade': agilidade
        }
        st.success("Resultados salvos com sucesso!")


def show_resistencia_tests():
    st.title("üèÉ Testes de Resist√™ncia")
    
    st.info("Complete os testes de resist√™ncia abaixo. Realize cada teste conforme as instru√ß√µes.")
    
    # Teste 1: Burpee
    with st.expander("Teste de Burpee", expanded=True):
        st.write("**Descri√ß√£o:** M√°ximo de burpees em 3 minutos")
        st.write("**Equipamento necess√°rio:** Cron√¥metro")
        st.write("**Como realizar:**")
        st.write("""
        1. Em p√©
        2. Agache e apoie as m√£os
        3. Estenda as pernas
        4. Volte e salte
        5. Conte em 3 minutos
        """)
        st.write("**Classifica√ß√£o:**")
        st.write("""
        - Iniciante: 25-35 repeti√ß√µes
        - Intermedi√°rio: 36-50 repeti√ß√µes
        - Avan√ßado: 51+ repeti√ß√µes
        """)
        burpees = st.number_input("N√∫mero de burpees", min_value=0, max_value=100)
    
    # Teste 2: Cooper Adaptado
    with st.expander("Teste de Cooper Adaptado", expanded=True):
        st.write("**Descri√ß√£o:** Dist√¢ncia percorrida em 6 minutos")
        st.write("**Equipamento necess√°rio:** Cron√¥metro, √°rea para correr")
        st.write("**Como realizar:**")
        st.write("""
        1. Marque um percurso conhecido
        2. Corra/ande por 6 minutos
        3. Me√ßa a dist√¢ncia total
        """)
        st.write("**Classifica√ß√£o:**")
        st.write("""
        - Iniciante: <1000m
        - Intermedi√°rio: 1000-1400m
        - Avan√ßado: >1400m
        """)
        cooper = st.number_input("Dist√¢ncia (metros)", min_value=0, max_value=3000, step=50)
    
    if st.button("Salvar Resultados"):
        st.session_state.test_results['resistencia'] = {
            'burpees': burpees,
            'cooper': cooper
        }
        st.success("Resultados salvos com sucesso!")

def show_coordenacao_tests():
    st.title("üéØ Testes de Coordena√ß√£o")
    
    st.info("Complete os testes de coordena√ß√£o abaixo. Realize cada teste conforme as instru√ß√µes.")
    
    # Teste 1: Equil√≠brio
    with st.expander("Teste de Equil√≠brio", expanded=True):
        st.write("**Descri√ß√£o:** Tempo em equil√≠brio em uma perna s√≥")
        st.write("**Equipamento necess√°rio:** Cron√¥metro")
        st.write("**Como realizar:**")
        st.write("""
        1. Fique em uma perna
        2. Olhos fechados
        3. Bra√ßos cruzados
        4. Me√ßa o tempo at√© desequilibrar
        """)
        st.write("**Classifica√ß√£o:**")
        st.write("""
        - Iniciante: <20 segundos
        - Intermedi√°rio: 20-40 segundos
        - Avan√ßado: >40 segundos
        """)
        equilibrio = st.number_input("Tempo (segundos)", min_value=0, max_value=120)
    
    # Teste 2: Saltos Alternados
    with st.expander("Saltos Alternados", expanded=True):
        st.write("**Descri√ß√£o:** Coordena√ß√£o de saltos em 30 segundos")
        st.write("**Equipamento necess√°rio:** Cron√¥metro")
        st.write("**Como realizar:**")
        st.write("""
        1. Salte alternando pernas
        2. Toque joelho oposto
        3. Conte repeti√ß√µes em 30s
        """)
        st.write("**Classifica√ß√£o:**")
        st.write("""
        - Iniciante: <20 repeti√ß√µes
        - Intermedi√°rio: 20-30 repeti√ß√µes
        - Avan√ßado: >30 repeti√ß√µes
        """)
        saltos = st.number_input("N√∫mero de saltos", min_value=0, max_value=100)
    
    if st.button("Salvar Resultados"):
        st.session_state.test_results['coordenacao'] = {
            'equilibrio': equilibrio,
            'saltos': saltos
        }
        st.success("Resultados salvos com sucesso!")

def show_recommendations():
    st.title("‚≠ê Suas Recomenda√ß√µes de Esportes")
    
    # Verificar se todos os testes foram completados
    test_categories = ['for√ßa', 'velocidade', 'resistencia', 'coordenacao']
    all_tests_completed = all(
        len(st.session_state.test_results.get(category, {})) > 0 
        for category in test_categories
    )
    
    if not all_tests_completed:
        st.warning("Por favor, complete todos os testes para receber suas recomenda√ß√µes!")
        return
    
    # Processar resultados e obter recomenda√ß√µes
    if 'recommendations' not in st.session_state or st.session_state.recommendations is None:
        with st.spinner("Analisando seus resultados..."):
            try:
                processed_results = process_test_results(st.session_state.test_results)
                st.session_state.recommendations = get_sport_recommendations(processed_results)
            except Exception as e:
                st.error(f"Erro ao processar recomenda√ß√µes: {str(e)}")
                return
    
    # Mostrar gr√°fico radar
    st.subheader("Seu Perfil de Habilidades")
    try:
        radar_chart = create_radar_chart(st.session_state.test_results)
        st.plotly_chart(radar_chart, use_container_width=True)
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico: {str(e)}")
    
    # Mostrar recomenda√ß√µes
    st.subheader("Esportes Recomendados")
    
    if not st.session_state.recommendations:
        st.warning("Nenhuma recomenda√ß√£o dispon√≠vel no momento.")
        return
        
    # Verificar formato das recomenda√ß√µes
    if isinstance(st.session_state.recommendations, list):
        for sport in st.session_state.recommendations:
            if isinstance(sport, dict) and 'name' in sport and 'compatibility' in sport:
                with st.expander(f"{sport['name']} - {sport['compatibility']}% compat√≠vel"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**Pontos Fortes:**")
                        if 'strengths' in sport and isinstance(sport['strengths'], list):
                            for strength in sport['strengths']:
                                st.write(f"‚úì {strength}")
                    
                    with col2:
                        st.write("**√Åreas para Desenvolvimento:**")
                        if 'development' in sport and isinstance(sport['development'], list):
                            for area in sport['development']:
                                st.write(f"‚Üí {area}")
            else:
                st.error("Formato de recomenda√ß√£o inv√°lido")
    else:
        st.error("Formato de recomenda√ß√µes inv√°lido")
    
    # Bot√µes de a√ß√£o
    st.divider()
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä Exportar Relat√≥rio"):
            st.info("Funcionalidade de exporta√ß√£o em desenvolvimento")
    
    with col2:
        if st.button("üîÑ Recome√ßar"):
            for key in st.session_state.keys():
                del st.session_state[key]
            st.rerun()
            
def main():
    # Menu lateral
    with st.sidebar:
        selected = option_menu(
            "Menu Principal",
            ["Home", "Testes de For√ßa", "Testes de Velocidade", "Testes de Resist√™ncia", "Testes de Coordena√ß√£o", "Recomenda√ß√µes"],
            icons=['house', 'activity', 'bullseye', 'diagram-3', 'person', 'star'],
            menu_icon="cast",
            default_index=0,
        )
    
    # Conte√∫do baseado na sele√ß√£o do menu
    if selected == "Home":
        st.title("üèÉ‚Äç‚ôÇÔ∏è Analisador de Talentos Esportivos")
        st.header("Bem-vindo ao Analisador de Talentos Esportivos!")
        
        # Informa√ß√µes Pessoais
        st.subheader("Informa√ß√µes Pessoais")
        with st.form("personal_info"):
            col1, col2 = st.columns(2)
            
            with col1:
                altura = st.number_input("Altura (cm)", min_value=0, max_value=300)
                peso = st.number_input("Peso (kg)", min_value=0, max_value=300)
                envergadura = st.number_input("Envergadura (cm)", min_value=0, max_value=300)
            
            with col2:
                idade = st.number_input("Idade", min_value=0, max_value=150)
                ano_nascimento = st.number_input("Ano de Nascimento", min_value=1900, max_value=2024)
            
            # Localiza√ß√£o
            st.write("**Localiza√ß√£o**")
            col3, col4, col5 = st.columns(3)
            
            with col3:
                cidade = st.text_input("Cidade")
            with col4:
                estado = st.text_input("Estado")
            with col5:
                pais = st.text_input("Pa√≠s")
            
            if st.form_submit_button("Salvar Informa√ß√µes"):
                st.session_state.personal_info = {
                    'altura': altura,
                    'peso': peso,
                    'envergadura': envergadura,
                    'idade': idade,
                    'ano_nascimento': ano_nascimento,
                    'cidade': cidade,
                    'estado': estado,
                    'pais': pais
                }
                st.success("Informa√ß√µes pessoais salvas com sucesso!")
        
        # Progresso dos Testes
        st.subheader("Seu Progresso")
        progress_data = {
            "Testes de For√ßa": len(st.session_state.test_results['for√ßa']),
            "Testes de Velocidade": len(st.session_state.test_results['velocidade']),
            "Testes de Resist√™ncia": len(st.session_state.test_results['resistencia']),
            "Testes de Coordena√ß√£o": len(st.session_state.test_results['coordenacao'])
        }
        
        for test, count in progress_data.items():
            progress = count / 2  # 2 testes por categoria
            st.progress(progress, text=f"{test}: {int(progress * 100)}%")
            
    elif selected == "Testes de For√ßa":
        show_for√ßa_tests()
    elif selected == "Testes de Velocidade":
        show_velocidade_tests()
    elif selected == "Testes de Resist√™ncia":
        show_resistencia_tests()
    elif selected == "Testes de Coordena√ß√£o":
        show_coordenacao_tests()
    elif selected == "Recomenda√ß√µes":
        show_recommendations()

if __name__ == "__main__":
    # Esconder menu hamburger e outros elementos do Streamlit
    st.markdown("""
        <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            [data-testid="stSidebarNav"] {display: none;}
        </style>
    """, unsafe_allow_html=True)
    
    init_session_state()
    main()
